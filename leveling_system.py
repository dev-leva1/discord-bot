"""–ú–æ–¥—É–ª—å —Å–∏—Å—Ç–µ–º—ã —É—Ä–æ–≤–Ω–µ–π –¥–ª—è Discord –±–æ—Ç–∞."""

import json
from pathlib import Path
import random
import asyncio
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Tuple, Union

import discord

class LevelingSystem:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–æ–π —É—Ä–æ–≤–Ω–µ–π."""
    
    def __init__(self, bot):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —É—Ä–æ–≤–Ω–µ–π.
        
        Args:
            bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        """
        self.bot = bot
        self.data_file = Path("levels.json")
        self.data = self.load_data()
        self.xp_cooldowns: Dict[str, datetime] = {}
        
    def load_data(self) -> Dict:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ–± —É—Ä–æ–≤–Ω—è—Ö –∏–∑ —Ñ–∞–π–ª–∞.
        
        Returns:
            Dict: –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å
        """
        if self.data_file.exists():
            with open(self.data_file, 'r', encoding='utf-8') as f:
                return json.load(f)
        return {}
        
    def save_data(self) -> None:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ–± —É—Ä–æ–≤–Ω—è—Ö –≤ —Ñ–∞–π–ª."""
        with open(self.data_file, 'w', encoding='utf-8') as f:
            json.dump(self.data, f, indent=4)
            
    def get_xp_for_level(self, level: int) -> int:
        """–†–∞—Å—á–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–≥–æ –æ–ø—ã—Ç–∞ –¥–ª—è —É—Ä–æ–≤–Ω—è.
        
        Args:
            level: –¶–µ–ª–µ–≤–æ–π —É—Ä–æ–≤–µ–Ω—å
            
        Returns:
            int: –ù–µ–æ–±—Ö–æ–¥–∏–º—ã–π –æ–ø—ã—Ç
        """
        return 5 * (level ** 2) + 50 * level + 100
        
    def get_level_for_xp(self, xp: int) -> int:
        """–†–∞—Å—á–µ—Ç —É—Ä–æ–≤–Ω—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–ø—ã—Ç–∞.
        
        Args:
            xp: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø—ã—Ç–∞
            
        Returns:
            int: –¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å
        """
        level = 0
        while xp >= self.get_xp_for_level(level):
            xp -= self.get_xp_for_level(level)
            level += 1
        return level
        
    async def add_experience(self, member: discord.Member) -> Tuple[bool, Optional[int]]:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–ø—ã—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
        
        Args:
            member: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            
        Returns:
            Tuple[bool, Optional[int]]: (–ë—ã–ª–æ –ª–∏ –ø–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è, –ù–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å)
        """
        user_id = str(member.id)
        guild_id = str(member.guild.id)
        
        cooldown_key = f"{user_id}_{guild_id}"
        current_time = datetime.now()
        if cooldown_key in self.xp_cooldowns:
            if current_time < self.xp_cooldowns[cooldown_key]:
                return False, None
                
        self.xp_cooldowns[cooldown_key] = current_time + timedelta(seconds=60)
        
        if guild_id not in self.data:
            self.data[guild_id] = {}
            
        if user_id not in self.data[guild_id]:
            self.data[guild_id][user_id] = {"xp": 0, "level": 0}
            
        xp_gain = random.randint(15, 25)
        self.data[guild_id][user_id]["xp"] += xp_gain
        
        current_xp = self.data[guild_id][user_id]["xp"]
        new_level = self.get_level_for_xp(current_xp)
        
        if new_level > self.data[guild_id][user_id]["level"]:
            self.data[guild_id][user_id]["level"] = new_level
            self.save_data()
            
            embed = discord.Embed(
                title="üéâ –ü–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è!",
                description=f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, {member.mention}! –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ {new_level} —É—Ä–æ–≤–Ω—è!",
                color=discord.Color.gold()
            )
            try:
                await member.channel.send(embed=embed)
            except discord.HTTPException:
                pass
                
            await self.bot.role_rewards.check_level_up(member, new_level)
            
            return True, new_level
            
        self.save_data()
        return False, None
        
    async def get_level_xp(
        self,
        user_id: Union[str, int],
        guild_id: Union[str, int]
    ) -> Tuple[int, int]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –∏ –æ–ø—ã—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            guild_id: ID —Å–µ—Ä–≤–µ—Ä–∞
            
        Returns:
            Tuple[int, int]: (–£—Ä–æ–≤–µ–Ω—å, –û–ø—ã—Ç)
        """
        user_id = str(user_id)
        guild_id = str(guild_id)
        
        if guild_id not in self.data or user_id not in self.data[guild_id]:
            return 0, 0
            
        return (
            self.data[guild_id][user_id]["level"],
            self.data[guild_id][user_id]["xp"]
        )
        
    async def get_leaderboard(
        self,
        guild_id: Union[str, int],
        limit: int = 10
    ) -> List[Dict[str, Union[str, int]]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤ —Å–µ—Ä–≤–µ—Ä–∞.
        
        Args:
            guild_id: ID —Å–µ—Ä–≤–µ—Ä–∞
            limit: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ
            
        Returns:
            List[Dict[str, Union[str, int]]]: –°–ø–∏—Å–æ–∫ –ª–∏–¥–µ—Ä–æ–≤
        """
        guild_id = str(guild_id)
        
        if guild_id not in self.data:
            return []
            
        users = []
        for user_id, data in self.data[guild_id].items():
            users.append({
                "user_id": user_id,
                "xp": data["xp"],
                "level": data["level"]
            })
            
        return sorted(users, key=lambda x: (x["level"], x["xp"]), reverse=True)[:limit]

leveling: Optional[LevelingSystem] = None

def init_leveling(bot) -> LevelingSystem:
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —É—Ä–æ–≤–Ω–µ–π.
    
    Args:
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        
    Returns:
        LevelingSystem: –≠–∫–∑–µ–º–ø–ª—è—Ä —Å–∏—Å—Ç–µ–º—ã —É—Ä–æ–≤–Ω–µ–π
    """
    global leveling
    leveling = LevelingSystem(bot)
    return leveling

async def add_experience(
    user_id: Union[str, int],
    guild_id: Union[str, int]
) -> Tuple[bool, Optional[int]]:
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–ø—ã—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏).
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        guild_id: ID —Å–µ—Ä–≤–µ—Ä–∞
        
    Returns:
        Tuple[bool, Optional[int]]: (–ë—ã–ª–æ –ª–∏ –ø–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è, –ù–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å)
    """
    if leveling:
        member = leveling.bot.get_guild(int(guild_id)).get_member(int(user_id))
        if member:
            return await leveling.add_experience(member)
    return False, None
    
async def get_level_xp(
    user_id: Union[str, int],
    guild_id: Union[str, int]
) -> Tuple[int, int]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –∏ –æ–ø—ã—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏).
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        guild_id: ID —Å–µ—Ä–≤–µ—Ä–∞
        
    Returns:
        Tuple[int, int]: (–£—Ä–æ–≤–µ–Ω—å, –û–ø—ã—Ç)
    """
    if leveling:
        return await leveling.get_level_xp(user_id, guild_id)
    return 0, 0
    
async def get_leaderboard(
    guild_id: Union[str, int],
    limit: int = 10
) -> List[Dict[str, Union[str, int]]]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤ —Å–µ—Ä–≤–µ—Ä–∞ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏).
    
    Args:
        guild_id: ID —Å–µ—Ä–≤–µ—Ä–∞
        limit: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ
        
    Returns:
        List[Dict[str, Union[str, int]]]: –°–ø–∏—Å–æ–∫ –ª–∏–¥–µ—Ä–æ–≤
    """
    if leveling:
        return await leveling.get_leaderboard(guild_id, limit)
    return [] 